// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.akkaserverless

/** Views configuration for a gRPC method.
  */
@SerialVersionUID(0L)
final case class View(
    updateOrQuery: com.akkaserverless.View.UpdateOrQuery = com.akkaserverless.View.UpdateOrQuery.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[View] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (updateOrQuery.update.isDefined) {
        val __value = updateOrQuery.update.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (updateOrQuery.query.isDefined) {
        val __value = updateOrQuery.query.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      updateOrQuery.update.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      updateOrQuery.query.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getUpdate: com.akkaserverless.View.Update = updateOrQuery.update.getOrElse(com.akkaserverless.View.Update.defaultInstance)
    def withUpdate(__v: com.akkaserverless.View.Update): View = copy(updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Update(__v))
    def getQuery: com.akkaserverless.View.Query = updateOrQuery.query.getOrElse(com.akkaserverless.View.Query.defaultInstance)
    def withQuery(__v: com.akkaserverless.View.Query): View = copy(updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Query(__v))
    def clearUpdateOrQuery: View = copy(updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Empty)
    def withUpdateOrQuery(__v: com.akkaserverless.View.UpdateOrQuery): View = copy(updateOrQuery = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => updateOrQuery.update.orNull
        case 2 => updateOrQuery.query.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => updateOrQuery.update.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => updateOrQuery.query.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.akkaserverless.View.type = com.akkaserverless.View
    // @@protoc_insertion_point(GeneratedMessage[akkaserverless.View])
}

object View extends scalapb.GeneratedMessageCompanion[com.akkaserverless.View] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.akkaserverless.View] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.akkaserverless.View = {
    var __updateOrQuery: com.akkaserverless.View.UpdateOrQuery = com.akkaserverless.View.UpdateOrQuery.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Update(__updateOrQuery.update.fold(_root_.scalapb.LiteParser.readMessage[com.akkaserverless.View.Update](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Query(__updateOrQuery.query.fold(_root_.scalapb.LiteParser.readMessage[com.akkaserverless.View.Query](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.akkaserverless.View(
        updateOrQuery = __updateOrQuery,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.akkaserverless.View] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.akkaserverless.View(
        updateOrQuery = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.akkaserverless.View.Update]]).map(com.akkaserverless.View.UpdateOrQuery.Update(_))
            .orElse[com.akkaserverless.View.UpdateOrQuery](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.akkaserverless.View.Query]]).map(com.akkaserverless.View.UpdateOrQuery.Query(_)))
            .getOrElse(com.akkaserverless.View.UpdateOrQuery.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ViewsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ViewsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.akkaserverless.View.Update
      case 2 => __out = com.akkaserverless.View.Query
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.akkaserverless.View.Update,
      _root_.com.akkaserverless.View.Query
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.akkaserverless.View(
    updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Empty
  )
  sealed trait UpdateOrQuery extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isUpdate: _root_.scala.Boolean = false
    def isQuery: _root_.scala.Boolean = false
    def update: _root_.scala.Option[com.akkaserverless.View.Update] = _root_.scala.None
    def query: _root_.scala.Option[com.akkaserverless.View.Query] = _root_.scala.None
  }
  object UpdateOrQuery {
    @SerialVersionUID(0L)
    case object Empty extends com.akkaserverless.View.UpdateOrQuery {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Update(value: com.akkaserverless.View.Update) extends com.akkaserverless.View.UpdateOrQuery {
      type ValueType = com.akkaserverless.View.Update
      override def isUpdate: _root_.scala.Boolean = true
      override def update: _root_.scala.Option[com.akkaserverless.View.Update] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Query(value: com.akkaserverless.View.Query) extends com.akkaserverless.View.UpdateOrQuery {
      type ValueType = com.akkaserverless.View.Query
      override def isQuery: _root_.scala.Boolean = true
      override def query: _root_.scala.Option[com.akkaserverless.View.Query] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  /** @param table
    *   Indicates the name of the table that this processing method will persist
    *   to, or that the query that is indexing will use.
    *  
    *   The return type of this call specifies the schema of the persisted value.
    *   Any defined queries that select from this table will be selecting over this
    *   schema.
    * @param transformUpdates
    *   Whether messages should automatically be persisted without further
    *   processing.
    *  
    *   By default (false) all received message will be persisted at the key given
    *   by the CloudEvents subject (that is, the entity key) without passing them
    *   to the gRPC service call. That is, the user function does not need to
    *   implement this service call.
    */
  @SerialVersionUID(0L)
  final case class Update(
      table: _root_.scala.Predef.String = "",
      transformUpdates: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Update] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = table
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = transformUpdates
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = table
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = transformUpdates
          if (__v != false) {
            _output__.writeBool(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withTable(__v: _root_.scala.Predef.String): Update = copy(table = __v)
      def withTransformUpdates(__v: _root_.scala.Boolean): Update = copy(transformUpdates = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = table
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = transformUpdates
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(table)
          case 2 => _root_.scalapb.descriptors.PBoolean(transformUpdates)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.akkaserverless.View.Update.type = com.akkaserverless.View.Update
      // @@protoc_insertion_point(GeneratedMessage[akkaserverless.View.Update])
  }
  
  object Update extends scalapb.GeneratedMessageCompanion[com.akkaserverless.View.Update] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.akkaserverless.View.Update] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.akkaserverless.View.Update = {
      var __table: _root_.scala.Predef.String = ""
      var __transformUpdates: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __table = _input__.readStringRequireUtf8()
          case 16 =>
            __transformUpdates = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.akkaserverless.View.Update(
          table = __table,
          transformUpdates = __transformUpdates,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.akkaserverless.View.Update] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.akkaserverless.View.Update(
          table = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          transformUpdates = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.akkaserverless.View.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.akkaserverless.View.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.akkaserverless.View.Update(
      table = "",
      transformUpdates = false
    )
    implicit class UpdateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.View.Update]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.akkaserverless.View.Update](_l) {
      def table: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.table)((c_, f_) => c_.copy(table = f_))
      def transformUpdates: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.transformUpdates)((c_, f_) => c_.copy(transformUpdates = f_))
    }
    final val TABLE_FIELD_NUMBER = 1
    final val TRANSFORM_UPDATES_FIELD_NUMBER = 2
    def of(
      table: _root_.scala.Predef.String,
      transformUpdates: _root_.scala.Boolean
    ): _root_.com.akkaserverless.View.Update = _root_.com.akkaserverless.View.Update(
      table,
      transformUpdates
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[akkaserverless.View.Update])
  }
  
  /** @param query
    *   A query that gets executed when this call is executed.
    *  
    *   This query is used to know how the view should be indexed.
    * @param transformResults
    *   Whether query results should be passed to the user function for further
    *   processing before being returned to the client.
    *  
    *   By default (false), the user function does not process query results.
    */
  @SerialVersionUID(0L)
  final case class Query(
      query: _root_.scala.Predef.String = "",
      transformResults: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Query] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = query
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        
        {
          val __value = transformResults
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = query
          if (!__v.isEmpty) {
            _output__.writeString(3, __v)
          }
        };
        {
          val __v = transformResults
          if (__v != false) {
            _output__.writeBool(4, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withQuery(__v: _root_.scala.Predef.String): Query = copy(query = __v)
      def withTransformResults(__v: _root_.scala.Boolean): Query = copy(transformResults = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 3 => {
            val __t = query
            if (__t != "") __t else null
          }
          case 4 => {
            val __t = transformResults
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 3 => _root_.scalapb.descriptors.PString(query)
          case 4 => _root_.scalapb.descriptors.PBoolean(transformResults)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.akkaserverless.View.Query.type = com.akkaserverless.View.Query
      // @@protoc_insertion_point(GeneratedMessage[akkaserverless.View.Query])
  }
  
  object Query extends scalapb.GeneratedMessageCompanion[com.akkaserverless.View.Query] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.akkaserverless.View.Query] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.akkaserverless.View.Query = {
      var __query: _root_.scala.Predef.String = ""
      var __transformResults: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __query = _input__.readStringRequireUtf8()
          case 32 =>
            __transformResults = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.akkaserverless.View.Query(
          query = __query,
          transformResults = __transformResults,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.akkaserverless.View.Query] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.akkaserverless.View.Query(
          query = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          transformResults = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.akkaserverless.View.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.akkaserverless.View.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.akkaserverless.View.Query(
      query = "",
      transformResults = false
    )
    implicit class QueryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.View.Query]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.akkaserverless.View.Query](_l) {
      def query: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.query)((c_, f_) => c_.copy(query = f_))
      def transformResults: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.transformResults)((c_, f_) => c_.copy(transformResults = f_))
    }
    final val QUERY_FIELD_NUMBER = 3
    final val TRANSFORM_RESULTS_FIELD_NUMBER = 4
    def of(
      query: _root_.scala.Predef.String,
      transformResults: _root_.scala.Boolean
    ): _root_.com.akkaserverless.View.Query = _root_.com.akkaserverless.View.Query(
      query,
      transformResults
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[akkaserverless.View.Query])
  }
  
  implicit class ViewLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.View]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.akkaserverless.View](_l) {
    def update: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.View.Update] = field(_.getUpdate)((c_, f_) => c_.copy(updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Update(f_)))
    def query: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.View.Query] = field(_.getQuery)((c_, f_) => c_.copy(updateOrQuery = com.akkaserverless.View.UpdateOrQuery.Query(f_)))
    def updateOrQuery: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.View.UpdateOrQuery] = field(_.updateOrQuery)((c_, f_) => c_.copy(updateOrQuery = f_))
  }
  final val UPDATE_FIELD_NUMBER = 1
  final val QUERY_FIELD_NUMBER = 2
  def of(
    updateOrQuery: com.akkaserverless.View.UpdateOrQuery
  ): _root_.com.akkaserverless.View = _root_.com.akkaserverless.View(
    updateOrQuery
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[akkaserverless.View])
}

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.akkaserverless

/** Event source configuration
  *
  * @param consumerGroup
  *   The consumer group id.
  *  
  *   By default, all rpc methods on a given service with the same source will be
  *   part of the same virtual consumer group, messages will be routed to the
  *   different methods by type. This can be used to override that. If you want
  *   multiple methods to act as independent consumers of the same source (ie, if
  *   you want the same event to be published to each consumer) then give each
  *   consumer a unique name.
  *  
  *   Note that this does depend on the event source supporting multiple consumer
  *   groups. Queue based event sources may not support this.
  */
@SerialVersionUID(0L)
final case class EventSource(
    consumerGroup: _root_.scala.Predef.String = "",
    source: com.akkaserverless.EventSource.Source = com.akkaserverless.EventSource.Source.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EventSource] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = consumerGroup
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (source.topic.isDefined) {
        val __value = source.topic.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (source.eventSourcedEntity.isDefined) {
        val __value = source.eventSourcedEntity.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (source.valueEntity.isDefined) {
        val __value = source.valueEntity.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = consumerGroup
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      source.topic.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      source.eventSourcedEntity.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      source.valueEntity.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withConsumerGroup(__v: _root_.scala.Predef.String): EventSource = copy(consumerGroup = __v)
    def getTopic: _root_.scala.Predef.String = source.topic.getOrElse("")
    def withTopic(__v: _root_.scala.Predef.String): EventSource = copy(source = com.akkaserverless.EventSource.Source.Topic(__v))
    def getEventSourcedEntity: _root_.scala.Predef.String = source.eventSourcedEntity.getOrElse("")
    def withEventSourcedEntity(__v: _root_.scala.Predef.String): EventSource = copy(source = com.akkaserverless.EventSource.Source.EventSourcedEntity(__v))
    def getValueEntity: _root_.scala.Predef.String = source.valueEntity.getOrElse("")
    def withValueEntity(__v: _root_.scala.Predef.String): EventSource = copy(source = com.akkaserverless.EventSource.Source.ValueEntity(__v))
    def clearSource: EventSource = copy(source = com.akkaserverless.EventSource.Source.Empty)
    def withSource(__v: com.akkaserverless.EventSource.Source): EventSource = copy(source = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = consumerGroup
          if (__t != "") __t else null
        }
        case 2 => source.topic.orNull
        case 3 => source.eventSourcedEntity.orNull
        case 4 => source.valueEntity.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(consumerGroup)
        case 2 => source.topic.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => source.eventSourcedEntity.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => source.valueEntity.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.akkaserverless.EventSource.type = com.akkaserverless.EventSource
    // @@protoc_insertion_point(GeneratedMessage[akkaserverless.EventSource])
}

object EventSource extends scalapb.GeneratedMessageCompanion[com.akkaserverless.EventSource] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.akkaserverless.EventSource] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.akkaserverless.EventSource = {
    var __consumerGroup: _root_.scala.Predef.String = ""
    var __source: com.akkaserverless.EventSource.Source = com.akkaserverless.EventSource.Source.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __consumerGroup = _input__.readStringRequireUtf8()
        case 18 =>
          __source = com.akkaserverless.EventSource.Source.Topic(_input__.readStringRequireUtf8())
        case 26 =>
          __source = com.akkaserverless.EventSource.Source.EventSourcedEntity(_input__.readStringRequireUtf8())
        case 34 =>
          __source = com.akkaserverless.EventSource.Source.ValueEntity(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.akkaserverless.EventSource(
        consumerGroup = __consumerGroup,
        source = __source,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.akkaserverless.EventSource] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.akkaserverless.EventSource(
        consumerGroup = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        source = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.akkaserverless.EventSource.Source.Topic(_))
            .orElse[com.akkaserverless.EventSource.Source](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.akkaserverless.EventSource.Source.EventSourcedEntity(_)))
            .orElse[com.akkaserverless.EventSource.Source](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.akkaserverless.EventSource.Source.ValueEntity(_)))
            .getOrElse(com.akkaserverless.EventSource.Source.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventingProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventingProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.akkaserverless.EventSource(
    consumerGroup = "",
    source = com.akkaserverless.EventSource.Source.Empty
  )
  sealed trait Source extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isTopic: _root_.scala.Boolean = false
    def isEventSourcedEntity: _root_.scala.Boolean = false
    def isValueEntity: _root_.scala.Boolean = false
    def topic: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def eventSourcedEntity: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def valueEntity: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object Source {
    @SerialVersionUID(0L)
    case object Empty extends com.akkaserverless.EventSource.Source {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Topic(value: _root_.scala.Predef.String) extends com.akkaserverless.EventSource.Source {
      type ValueType = _root_.scala.Predef.String
      override def isTopic: _root_.scala.Boolean = true
      override def topic: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class EventSourcedEntity(value: _root_.scala.Predef.String) extends com.akkaserverless.EventSource.Source {
      type ValueType = _root_.scala.Predef.String
      override def isEventSourcedEntity: _root_.scala.Boolean = true
      override def eventSourcedEntity: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class ValueEntity(value: _root_.scala.Predef.String) extends com.akkaserverless.EventSource.Source {
      type ValueType = _root_.scala.Predef.String
      override def isValueEntity: _root_.scala.Boolean = true
      override def valueEntity: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 4
    }
  }
  implicit class EventSourceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.EventSource]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.akkaserverless.EventSource](_l) {
    def consumerGroup: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.consumerGroup)((c_, f_) => c_.copy(consumerGroup = f_))
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTopic)((c_, f_) => c_.copy(source = com.akkaserverless.EventSource.Source.Topic(f_)))
    def eventSourcedEntity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEventSourcedEntity)((c_, f_) => c_.copy(source = com.akkaserverless.EventSource.Source.EventSourcedEntity(f_)))
    def valueEntity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getValueEntity)((c_, f_) => c_.copy(source = com.akkaserverless.EventSource.Source.ValueEntity(f_)))
    def source: _root_.scalapb.lenses.Lens[UpperPB, com.akkaserverless.EventSource.Source] = field(_.source)((c_, f_) => c_.copy(source = f_))
  }
  final val CONSUMER_GROUP_FIELD_NUMBER = 1
  final val TOPIC_FIELD_NUMBER = 2
  final val EVENT_SOURCED_ENTITY_FIELD_NUMBER = 3
  final val VALUE_ENTITY_FIELD_NUMBER = 4
  def of(
    consumerGroup: _root_.scala.Predef.String,
    source: com.akkaserverless.EventSource.Source
  ): _root_.com.akkaserverless.EventSource = _root_.com.akkaserverless.EventSource(
    consumerGroup,
    source
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[akkaserverless.EventSource])
}


// Generated by Akka gRPC. DO NOT EDIT.
package com.calncalncal

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait CounterServiceClient extends CounterService with CounterServiceClientPowerApi with AkkaGrpcClient

object CounterServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): CounterServiceClient =
    new DefaultCounterServiceClient(settings)
}

final class DefaultCounterServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends CounterServiceClient {
  import CounterService.MethodDescriptors._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, classOf[DefaultCounterServiceClient]))

  
  private def increaseRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    new ScalaUnaryRequestBuilder(increaseDescriptor, channel, options, settings)
  
  
  private def decreaseRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    new ScalaUnaryRequestBuilder(decreaseDescriptor, channel, options, settings)
  
  
  private def resetRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    new ScalaUnaryRequestBuilder(resetDescriptor, channel, options, settings)
  
  
  private def getCurrentCounterRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    new ScalaUnaryRequestBuilder(getCurrentCounterDescriptor, channel, options, settings)
  
  

  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer increase(com.calncalncal.IncreaseValue) if possible.
   */
  
  override def increase(): SingleResponseRequestBuilder[com.calncalncal.IncreaseValue, com.google.protobuf.empty.Empty] =
    increaseRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of increase
   */
  def increase(in: com.calncalncal.IncreaseValue): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
    increase().invoke(in)
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer decrease(com.calncalncal.DecreaseValue) if possible.
   */
  
  override def decrease(): SingleResponseRequestBuilder[com.calncalncal.DecreaseValue, com.google.protobuf.empty.Empty] =
    decreaseRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of decrease
   */
  def decrease(in: com.calncalncal.DecreaseValue): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
    decrease().invoke(in)
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer reset(com.calncalncal.ResetValue) if possible.
   */
  
  override def reset(): SingleResponseRequestBuilder[com.calncalncal.ResetValue, com.google.protobuf.empty.Empty] =
    resetRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of reset
   */
  def reset(in: com.calncalncal.ResetValue): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
    reset().invoke(in)
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer getCurrentCounter(com.calncalncal.GetCounter) if possible.
   */
  
  override def getCurrentCounter(): SingleResponseRequestBuilder[com.calncalncal.GetCounter, com.calncalncal.CurrentCounter] =
    getCurrentCounterRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of getCurrentCounter
   */
  def getCurrentCounter(in: com.calncalncal.GetCounter): scala.concurrent.Future[com.calncalncal.CurrentCounter] =
    getCurrentCounter().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}

object DefaultCounterServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): CounterServiceClient =
    new DefaultCounterServiceClient(settings)
}

trait CounterServiceClientPowerApi {
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer increase(com.calncalncal.IncreaseValue) if possible.
   */
  
  def increase(): SingleResponseRequestBuilder[com.calncalncal.IncreaseValue, com.google.protobuf.empty.Empty] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer decrease(com.calncalncal.DecreaseValue) if possible.
   */
  
  def decrease(): SingleResponseRequestBuilder[com.calncalncal.DecreaseValue, com.google.protobuf.empty.Empty] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer reset(com.calncalncal.ResetValue) if possible.
   */
  
  def reset(): SingleResponseRequestBuilder[com.calncalncal.ResetValue, com.google.protobuf.empty.Empty] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer getCurrentCounter(com.calncalncal.GetCounter) if possible.
   */
  
  def getCurrentCounter(): SingleResponseRequestBuilder[com.calncalncal.GetCounter, com.calncalncal.CurrentCounter] = ???
  
  

}
